// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL_DEV")
  relationMode = "prisma"
}

//Orbite authorization and management tables

model Organization{
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  icon String? @db.LongText

  //Relations
  users User[] @relation(name:"OrganizationUsers")
  config OrganizationConfig @relation(name:"OrganizationConfig",fields: [id], references: [id])
  @@index([id])
}
model OrganizationConfig{
  id Int @id @default(autoincrement())
  //TODO: Add organization wide config fields as settings require

  user Organization? @relation(name:"OrganizationConfig")
  @@index([id])
}

model User{
  //Clerk Unique ID
  id String @id 

  org Organization? @relation(name:"OrganizationUsers",fields: [org_id], references: [id])
  org_id Int? @unique

  //Clerk fields (from webhook)
  first_name String? //"first_name"
  last_name String? //"last_name" 
  created_at String //"created_at"   
  image_url String @default("") //"image_url" 
  
  isPassword Boolean //"password_enabled" 
  is2FA Boolean //"two_factor_enabled"

  username String //"username"
  birthday String? //"birthday" 
  gender String? //"gender" 

  emails Json? //"email_addresses" 
  primary_email_id String //"primary_email_address_id" 

  phone_numbers Json? //"phone_numbers"
  primary_phone_number_id String? //"primary_phone_number_id"

  web3_wallets Json? //"web3_wallets"
  primary_web3_wallet_id String? //"primary_web3_wallet_id"

  //Orbite fields
  is_onboarded Boolean @default(false)

  //Relations
  config UserConfig @relation(name:"UserConfig",fields: [config_id], references: [id], onDelete: Cascade)
  config_id Int @unique

  auth Auth @relation(name:"UserAuth" ,fields: [auth_id], references: [id])
  auth_id Int @unique

  @@index([id])
}
model UserConfig{
  //Clerk Unique ID
  id Int @id @default(autoincrement())
  
  //TODO: Add user config fields as settings require
  theme String? @default("light")

  user User? @relation(name:"UserConfig")

  chat_config ChatCustomization? @relation(name:"ChatCustomization" ,fields: [chat_config_id], references: [id] , onDelete: Cascade)
  chat_config_id Int? @unique
}

model ChatCustomization{
  id Int @id @default(autoincrement())
  primary_color String? @default("bg-gray-200")
  secondary_color String? @default("bg-violet-500")
  user UserConfig? @relation(name:"ChatCustomization")
  logo String? @db.MediumText
}

enum platform {
  moodle
  totara
  html
}

model Auth {
  id Int @id @default(autoincrement())

  user User? @relation(name:"UserAuth")

  handle String @unique @default(cuid())
  platform platform @default(html)
  API_KEY String @unique @default(uuid())
  key_expiry String?

  courses Course[] @relation(name:"AuthCourses")
  sections Section[] @relation(name:"AuthSections")
  modules Module[] @relation(name:"AuthModules")
  contents Content[] @relation(name:"AuthContents")
}




//Orbite user data tables

model Course{
  id Int @id 
  auth_id Int
  auth Auth @relation(name:"AuthCourses",fields: [auth_id], references: [id])

  title String
  label String? //Shortname/label for course
  summary String?
  icon String? @db.LongText
  visible Boolean @default(true)

  url String? //URL to course homepage

  //Sorting criteria's
  namespace String?
  category String? //Category of course
  tags String? //List of Tags for course

  version String //Version of course
  meta Json? //Meta data for course

  //Relations
  sections Section[] @relation("CourseSections")

  @@index([auth_id])
}

model Section{
  id Int @id 
  auth_id Int
  auth Auth @relation(name:"AuthSections",fields: [auth_id], references: [id])


  parent Course @relation("CourseSections", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_id Int

  title String
  summary String?
  order String
  sequence String? //Sequence of modules by ID
  visible Boolean @default(true)

  url String? //URL to section homepage

  version String //Version of section
  meta Json? //Meta data for section

  //Relations
  modules Module[] @relation("SectionModules")
  
  @@index([course_id])
  @@index([auth_id])
}

model Module{
  id Int @id
  auth_id Int
  auth Auth @relation(name:"AuthModules",fields: [auth_id], references: [id])
  
  parent Section @relation("SectionModules", fields: [section_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  section_id Int

  title String
  summary String?
  visible Boolean @default(true)

  url String? //URL to module homepage

  version String //Version of module
  meta Json? //Meta data for module

  //Relations
  contents Content[] @relation("ModuleContents")

  @@index([section_id])
  @@index([auth_id])
}

model Content{
  id Int @id
  auth_id Int
  auth Auth @relation(name:"AuthContents",fields: [auth_id], references: [id])
  
  parent Module @relation("ModuleContents", fields: [module_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  module_id Int

  slice_ids String @db.LongText //List of slices for content

  name String
  ext String
  visible Boolean @default(true)

  size Int? //Filesize in bytes
  mimetype String?
  created_at String? //UTC timestamp of last modified date

  url String? //URL to content homepage

  version String //Version of content
  meta Json? //Meta data for content

  @@index([module_id])
  @@index([auth_id])
}

