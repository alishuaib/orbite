1
00:00:00,000 --> 00:00:06,112
In this demonstration, we will be exploring the strategy tree node in Knowledge Studio.

2
00:00:06,112 --> 00:00:17,240
Strategy trees are slightly different from decision trees in the sense that they are used to help make business decision by running calculations on nodes and assigning treatments.

3
00:00:17,240 --> 00:00:26,488
To begin we'll start from a new workflow with the Auto Grown decision tree model alongside Training and Validation datasets already linked.

4
00:00:26,488 --> 00:00:31,947
Drag the Strategy Tree node found under the Model palette onto the canvas.

5
00:00:31,947 --> 00:00:36,493
Connect the training dataset and double click to open the wizard

6
00:00:36,493 --> 00:00:48,143
Here we can add calculations as expressions which will act as KPI's in our strategy tree. This can also be done in the strategy tree view which will be shown later.

7
00:00:48,143 --> 00:00:52,610
Click run to generate the tree and double click to open.

8
00:00:52,610 --> 00:00:57,495
By clicking options we can set various configurations for the tree.

9
00:00:57,495 --> 00:01:03,085
Under the tree config tab you can adjust the orientation for the tree if needed.

10
00:01:03,085 --> 00:01:08,832
Heading back to our tree view, right click on the root node and select find split.

11
00:01:08,832 --> 00:01:14,945
You will be prompted to select a dependent variable, in this case we will use Response.

12
00:01:14,945 --> 00:01:20,535
As can be seen, the relationship variable is selected to generate splits.

13
00:01:20,535 --> 00:01:25,707
Right clicking on husband and wife node, then selecting find split.

14
00:01:25,707 --> 00:01:37,436
If we select age as the dependent variable, it can be seen that values for age and response are shown in the selected node, but the splits only contain the new values from age.

15
00:01:37,436 --> 00:01:41,772
This is because we selected age as the new decision variable.

16
00:01:41,772 --> 00:01:51,699
Right clicking on the root node and selecting force split. We can select which variable to split by. Lets select education.

17
00:01:51,699 --> 00:01:57,968
Create 5 bins by clicking on settings and setting number of bins then click ok.

18
00:01:57,968 --> 00:02:07,529
Generating splits this way can be useful if you have previous business knowledge about customer segmentation and need to incorporate it into the strategy tree.

19
00:02:07,529 --> 00:02:16,150
Lets add the KPI calculations mentioned earlier now, right click anywhere in the tree view and select calculations.

20
00:02:16,150 --> 00:02:23,621
Click add to create an expression, for the first one we'll name it Profitability and get average of capital gain.

21
00:02:23,621 --> 00:02:29,498
Add another expression, we'll name it Loyalty and get average number of products.

22
00:02:29,498 --> 00:02:37,100
These expressions can be exported or imported in order to share with your team by using the import export buttons.

23
00:02:37,100 --> 00:02:41,802
Lets export these expressions so we can use them in another model.

24
00:02:41,802 --> 00:02:47,888
As can be seen on the tree, each node now calculates the Profitability and Loyalty.

25
00:02:47,888 --> 00:02:53,243
Lets build out the tree a bit more using Response as our dependent variable.

26
00:02:53,243 --> 00:03:01,524
Now if we want to see which segments have the highest KPI we can add color gradients to the tree by clicking options.

27
00:03:01,524 --> 00:03:08,107
For node color source select gradient calculations and set mapped value to profit.

28
00:03:08,107 --> 00:03:13,331
The lower number will get assigned white and the higher number will get assigned red.

29
00:03:13,331 --> 00:03:19,183
Clicking ok, now we can see where the KPI is higher and where it is lower.

30
00:03:19,183 --> 00:03:23,415
Next let's take a look at how we can assign treatments.

31
00:03:23,415 --> 00:03:27,072
Right click on a node and select treatments.

32
00:03:27,072 --> 00:03:32,793
Let's assign Mail to high KPI and No action to low KPI.

33
00:03:32,793 --> 00:03:39,036
Now that we have treatments assigned, lets head back to the canvas and save the model instance.

34
00:03:39,036 --> 00:03:46,298
Drag a new strategy tree and connect the auto grown decision tree model along side the training dataset.

35
00:03:46,298 --> 00:03:55,101
By connecting a decision tree model alongside the training dataset, the strategy tree can use the decision tree as a base template.

36
00:03:55,101 --> 00:03:59,620
Open and import the KPI's we exported earlier.

37
00:03:59,620 --> 00:04:05,158
We'll also add a new expression for computed conditional treatment using helpers.

38
00:04:05,158 --> 00:04:08,293
We are going to create 3 treatments

39
00:04:08,293 --> 00:04:17,828
For capital-gain less than a average of 500, set treatment to No-Action. select "Add more treatments" after clicking next

40
00:04:17,828 --> 00:04:27,258
For capital gain less than a average of 1500, set treatment to E-mail, select "Add more treatments" after clicking next once more.

41
00:04:27,258 --> 00:04:34,442
For capital gain above a average of 1500, set treatment to Mail and review the code.

42
00:04:34,442 --> 00:04:43,480
In the expression lets also setup a "and" clause to make sure E-mail is only assigned to greater than 500 and less than 1500.

43
00:04:43,480 --> 00:04:48,182
Click ok and now the calculation is visible on each node.

44
00:04:48,182 --> 00:04:57,064
To tell Knowledge Studio to treat this calculation as treatment, we can head over to tools and select "Treatment from calculations"

45
00:04:57,064 --> 00:05:00,956
Select our treatment KPI and click run,

46
00:05:00,956 --> 00:05:10,099
Now that each node has a treatment assigned to it, lets modify the tree colors to easily see which node got assigned to each treatment value.

47
00:05:10,099 --> 00:05:17,935
Click options and set node color source to "treatments" to assign a color to each of the 3 treatment values.

48
00:05:17,935 --> 00:05:22,167
Lets head back to the canvas and save the model instance.

49
00:05:22,167 --> 00:05:30,343
Next lets use the scoring node found under the action palette to score the validation dataset with our decision tree model.

50
00:05:30,343 --> 00:05:37,031
Drag the scoring node onto the canvas and connect the validation dataset and strategy tree model.

51
00:05:37,031 --> 00:05:39,852
Double click to open the wizard

52
00:05:39,852 --> 00:05:43,143
Set an appropriate name and click next

53
00:05:43,143 --> 00:05:47,584
Make sure the fields are mapped correctly then click next

54
00:05:47,584 --> 00:05:54,350
On the treatments page, null is used to indicate a node or record has no treatment assigned to it.

55
00:05:54,350 --> 00:06:00,567
Next we can select which treatments and calculations to include in the output

56
00:06:00,567 --> 00:06:07,385
Lastly select the output fields to include, in this case we only want customer ID.

57
00:06:07,385 --> 00:06:10,415
Click run to generate the output

58
00:06:10,415 --> 00:06:14,464
Opening the output dataset and viewing the data tab

59
00:06:14,464 --> 00:06:19,506
We can see each customer id is now associated with a treatment.

60
00:06:19,506 --> 00:06:24,809
The dataset chart can be used to see the percentage of records in each treatment.

61
00:06:24,809 --> 00:06:31,130
Back on the canvas connect the model and validation dataset to a model validation node.

62
00:06:31,130 --> 00:06:40,195
Validation for strategy tree adds a new heading to each node which indicates how the training dataset compares to the validation dataset.

63
00:06:40,195 --> 00:06:43,016
Double click to open the wizard

64
00:06:43,016 --> 00:06:46,307
Set an appropriate name and click next

65
00:06:46,307 --> 00:06:51,532
Here we can select which calculations to include in the validation

66
00:06:51,532 --> 00:06:58,663
The comparison mode page allows selecting how the comparison between training and validation should be made.

67
00:06:58,663 --> 00:07:01,014
Click next and run.

68
00:07:01,014 --> 00:07:09,295
Viewing the tree we can see that the validation heading has been added to every single node along side design and comparison.

